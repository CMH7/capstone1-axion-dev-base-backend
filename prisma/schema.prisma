generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type AccountsSubjects {
  color                   String
  id                      String // User_id + subject_name + new Date()
  isFavorite              Boolean
  name                    String
  workspaces              AccountsWorkspaces[]
  owned                   Boolean
  createdBy               String
}

type AccountsWorkspaces {
  members                 AccountsWorkspacesMembers[]
  boards                  AccountsBoards[]
  admins                  String[] // Array of AccountsWorkspacesMembers.email
  color                   String
  id                      String // subject_id + workspace_name + new Date()
  isFavorite              Boolean
  name                    String
  owned                   Boolean
  createdBy               String
}

type AccountsWorkspacesMembers {
  email                   String // Unique like id (one email for one account)
  name                    String
  profile                 String
}

type AccountsBoards {
  tasks                   AccountsTasks[]
  color                   String
  createdBy               String
  createdOn               DateTime
  id                      String // workspace_id + board_name + new Date()
  name                    String
}

type AccountsTasks {
  members                 AccountsTasksMembers[]
  subtasks                AccountsTasksSubtasks[]
  conversations           AccountsTasksConversations[]
  viewers                 String[]
  createdBy               String
  createdOn               DateTime
  description             String
  dueDateTime             DateTime
  id                      String // workspace_id + tasks_name + new Date()
  isFavorite              Boolean
  isSubtask               Boolean
  level                   Int
  name                    String
  status                  String
}

type AccountsTasksMembers {
  email                   String
  name                    String
  profile                 String
}

type AccountsTasksSubtasks {
  members                 AccountsTasksSubtasksMembers[]
  createdBy               String
  createdOn               DateTime
  description             String
  dueDateTime             DateTime
  id                      String
  isFavorite              Boolean
  name                    String
  status                  String
}

type AccountsTasksSubtasksMembers {
  email                   String
  name                    String
  profile                 String
}

type AccountsTasksConversations {
  sender                  AccountsTasksConversationsSender
  message                 String
  sendAt                  DateTime
  id                      String // AccountsTasksConversationsSender_email + new Date() + message (upto 13 chars)
}

type AccountsTasksConversationsSender {
  email                   String
  name                    String
  profile                 String
}

type AccountsNotification {
  id                      String // message + for.userID
  message                 String
  isRead                  Boolean
  anInvitation            Boolean
  aMention                Boolean
  conversationID          String
  fromInterface           AccountsNotificationFromInterface
  fromTask                String // task_id
  for                      AccountsNotificationFor
}

type AccountsNotificationFromInterface {
  interf                  String
  subInterface            String
}

type AccountsNotificationFor {
  self                    Boolean
  userID                  String
}

model subjects {
  id                      String  @id @default(auto())  @map("_id") @db.ObjectId
  color			              String
	isFavorite		          Boolean
	name			              String
	workspaces		          String[]
	ownerID		              String
	ownerName		            String
}

model accounts {
  subjects                AccountsSubjects[]
  notifications           AccountsNotification[]
  id                      String  @id @default(auto())  @map("_id") @db.ObjectId
  age                     Int
  course                  String
  email                   String
  firstName               String
  gender                  String
  lastName                String
  password                String
  profile                 String
  school                  String
  useHint                 Boolean
  year                    Int
  lastActive              DateTime
  bio                     String
}
